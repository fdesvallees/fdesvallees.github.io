{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TeenAstro and Linux TeenAstro is an open source telescope mount controller derived from OnStep , with a user interface based on the FS2 system by Astro Electronic (Michael Koch). It is fully documented at https://groups.io/g/TeenAstro/wiki/home The software consists of: Firmware for the Main Unit and for the Smart Hand Controller, drivers for interfacing with a computer ( ASCOM and INDI ), and utilities for flashing (programming) and configuring the boards. The documents on this site describe how to build and use TeenAstro in the Linux and MacOS environments. If you find errors or have suggestions, please contact me through the TeenAstro group .","title":"Home"},{"location":"#teenastro-and-linux","text":"TeenAstro is an open source telescope mount controller derived from OnStep , with a user interface based on the FS2 system by Astro Electronic (Michael Koch). It is fully documented at https://groups.io/g/TeenAstro/wiki/home The software consists of: Firmware for the Main Unit and for the Smart Hand Controller, drivers for interfacing with a computer ( ASCOM and INDI ), and utilities for flashing (programming) and configuring the boards. The documents on this site describe how to build and use TeenAstro in the Linux and MacOS environments. If you find errors or have suggestions, please contact me through the TeenAstro group .","title":"TeenAstro and Linux"},{"location":"config/","text":"TeenAstro Flashing and Configuration Flashing To flash (download) the firmware, you can either use the TeenAstroUploader application (Windows only), or the Arduino IDE (works on Windows, MacOS or Linux). In both cases, it is possible to program the microcontrollers as standalone (when unplugged from the TeenAstro PCB) through a microUSB port. After assembly, the Teensy on the Main Unit can also be programmed using the same tools through the USB port on the front panel, and the Wemos in the Hand Controller can be programmed through the web server interface Flashing Teensy through USB via the command line It is often convenient to flash with a simple standalone application instead of the IDE. To do this, launch teensy , normally installed in arduino-1.8.10/hardware/tools/ . Load the binary executable for your platform. Now instead of pressing the reset button on the Teensy, you can also reset it by software by launching the teensy_reboot utility in the same directory. Configuration These utilities allow to view and change the configuration of the mount (motor parameters etc.) For Windows, use TeenAstroConfig.exe For Mac OSX and Linux, use TAConfig.py","title":"Utilities"},{"location":"config/#teenastro-flashing-and-configuration","text":"","title":"TeenAstro Flashing and Configuration"},{"location":"config/#flashing","text":"To flash (download) the firmware, you can either use the TeenAstroUploader application (Windows only), or the Arduino IDE (works on Windows, MacOS or Linux). In both cases, it is possible to program the microcontrollers as standalone (when unplugged from the TeenAstro PCB) through a microUSB port. After assembly, the Teensy on the Main Unit can also be programmed using the same tools through the USB port on the front panel, and the Wemos in the Hand Controller can be programmed through the web server interface","title":"Flashing"},{"location":"config/#flashing-teensy-through-usb-via-the-command-line","text":"It is often convenient to flash with a simple standalone application instead of the IDE. To do this, launch teensy , normally installed in arduino-1.8.10/hardware/tools/ . Load the binary executable for your platform. Now instead of pressing the reset button on the Teensy, you can also reset it by software by launching the teensy_reboot utility in the same directory.","title":"Flashing Teensy through USB via the command line"},{"location":"config/#configuration","text":"These utilities allow to view and change the configuration of the mount (motor parameters etc.) For Windows, use TeenAstroConfig.exe For Mac OSX and Linux, use TAConfig.py","title":"Configuration"},{"location":"ekos/","text":"TeenAstro with Ekos Ekos is documented here . This gives some detail on its operation with TeenAstro Connection options KStars / Ekos runs either on a PC, Mac or on a Raspberry Pi. The connection between this device and TeenAstro is done either through Serial / USB (the Telescope port on the main unit), or through Wifi to the Smart HandController (SHC), port 9999 (IP address depends on the network). When running through Wifi, the SHC requires a firmware version that allows permanent IP connections with the \u201cOne to One\u201d Wifi menu option (SHC version 1.2b or above). Another choice is which computer runs Ekos, and how it is controlled. To reduce the number of cables, I chose to run it on a Raspberry Pi 4 attached the mount dovetail. I control the Pi 4 remotely via the excellent NoMachine free remote desktop application. Goto To control remotely the mount, start Kstars, launch Ekos from the Tool menu. Click on the Mount tab. You get this screen: Click on Mount Control to set the slew speed, select a target, and move in all directions: Guiding For long exposure astrophotography, the mount must track the stars precisely. To compensate polar alignment errors and refraction effects, we need to guide, by using a guide camera and software (PHD2 or Ekos Guide Module) running on a computer to correct the mount movement. The signals can be either electrical impulsions through USB and ST4 cables, or software commands from computer to mount (no need for ST4 cable between camera and mount). To select the software mode, enable \"Pulse Guiding\" in the TeenAstro INDI control panel. Other important options in the Guide tab of the control panel are: - Exposure time. I use 2 seconds. Guiding rate. I found that 0.5x works best on my setup. (Note: this is set in the TeenAstro INDI control panel.) If you use the Ekos guide module, keep the suggested control parameters (proportional and integral gains) and select Bin: 2x2 in the Guide Module tab. With these settings I obtain a guiding error of between 0.5 arc-second and 1 arc-second RMS with my setup (250mm focal length guide scope, ASI120mini camera, AP600 mount) Meridian Flip All German Equatorial mounts need to switch from east to west when imaging past the meridian. This is called the Meridian Flip and Ekos provides a way to do this automatically during a session. Here are the steps: - Determine the \"Past Meridian Mount Limit\" of your mount, ie the angle it can continue tracking past the meridian without the telescope hitting the pier. - Program this limit in the mount via the handset or Wifi interface - In the Ekos mount tab, check the box \"Flip if HA>\" and enter the same value as the TeenAstro limit. Start your photo session. When Ekos detects that the next capture will get close to the limit, it initiates a GOTO to the current target. TeenAstro will now perform the flip automatically. When done, Ekos restarts the photo session, after eventually performing an astrometry session to re-center the image (if programmed in the scheduler). Note : The meridian flip in the Ekos official release is not working as of April 2020. The fix is identified and should be implemented soon. Error handling When the telescope is tracking and moves past one of the defined limits, it stops tracking and does not execute any GOTO commands. On the SHC, an icon appears to show the limit. When it is controlled by Ekos, it shows the message in the Main tab of the TeenAstro INDI control panel. In both cases, the procedure to recover is the same: use the arrows (physical buttons on the SHC, or virtual buttons on Ekos) to move the mount back in the safe zone. As soon as the error message disappears, normal operation can resume. Using TeenAstro without the hand controller It is perfectly possible to use this configuration, for example in a fixed pier situation where the mount does not move between uses. The whole functionality is controlled entirely by Ekos on the remote computer. Obviously in this case only a serial connection is possible, since the Wifi module is no longer available. (It is in the SHC).","title":"Ekos"},{"location":"ekos/#teenastro-with-ekos","text":"Ekos is documented here . This gives some detail on its operation with TeenAstro","title":"TeenAstro with Ekos"},{"location":"ekos/#connection-options","text":"KStars / Ekos runs either on a PC, Mac or on a Raspberry Pi. The connection between this device and TeenAstro is done either through Serial / USB (the Telescope port on the main unit), or through Wifi to the Smart HandController (SHC), port 9999 (IP address depends on the network). When running through Wifi, the SHC requires a firmware version that allows permanent IP connections with the \u201cOne to One\u201d Wifi menu option (SHC version 1.2b or above). Another choice is which computer runs Ekos, and how it is controlled. To reduce the number of cables, I chose to run it on a Raspberry Pi 4 attached the mount dovetail. I control the Pi 4 remotely via the excellent NoMachine free remote desktop application.","title":"Connection options"},{"location":"ekos/#goto","text":"To control remotely the mount, start Kstars, launch Ekos from the Tool menu. Click on the Mount tab. You get this screen: Click on Mount Control to set the slew speed, select a target, and move in all directions:","title":"Goto"},{"location":"ekos/#guiding","text":"For long exposure astrophotography, the mount must track the stars precisely. To compensate polar alignment errors and refraction effects, we need to guide, by using a guide camera and software (PHD2 or Ekos Guide Module) running on a computer to correct the mount movement. The signals can be either electrical impulsions through USB and ST4 cables, or software commands from computer to mount (no need for ST4 cable between camera and mount). To select the software mode, enable \"Pulse Guiding\" in the TeenAstro INDI control panel. Other important options in the Guide tab of the control panel are: - Exposure time. I use 2 seconds. Guiding rate. I found that 0.5x works best on my setup. (Note: this is set in the TeenAstro INDI control panel.) If you use the Ekos guide module, keep the suggested control parameters (proportional and integral gains) and select Bin: 2x2 in the Guide Module tab. With these settings I obtain a guiding error of between 0.5 arc-second and 1 arc-second RMS with my setup (250mm focal length guide scope, ASI120mini camera, AP600 mount)","title":"Guiding"},{"location":"ekos/#meridian-flip","text":"All German Equatorial mounts need to switch from east to west when imaging past the meridian. This is called the Meridian Flip and Ekos provides a way to do this automatically during a session. Here are the steps: - Determine the \"Past Meridian Mount Limit\" of your mount, ie the angle it can continue tracking past the meridian without the telescope hitting the pier. - Program this limit in the mount via the handset or Wifi interface - In the Ekos mount tab, check the box \"Flip if HA>\" and enter the same value as the TeenAstro limit. Start your photo session. When Ekos detects that the next capture will get close to the limit, it initiates a GOTO to the current target. TeenAstro will now perform the flip automatically. When done, Ekos restarts the photo session, after eventually performing an astrometry session to re-center the image (if programmed in the scheduler). Note : The meridian flip in the Ekos official release is not working as of April 2020. The fix is identified and should be implemented soon.","title":"Meridian Flip"},{"location":"ekos/#error-handling","text":"When the telescope is tracking and moves past one of the defined limits, it stops tracking and does not execute any GOTO commands. On the SHC, an icon appears to show the limit. When it is controlled by Ekos, it shows the message in the Main tab of the TeenAstro INDI control panel. In both cases, the procedure to recover is the same: use the arrows (physical buttons on the SHC, or virtual buttons on Ekos) to move the mount back in the safe zone. As soon as the error message disappears, normal operation can resume.","title":"Error handling"},{"location":"ekos/#using-teenastro-without-the-hand-controller","text":"It is perfectly possible to use this configuration, for example in a fixed pier situation where the mount does not move between uses. The whole functionality is controlled entirely by Ekos on the remote computer. Obviously in this case only a serial connection is possible, since the Wifi module is no longer available. (It is in the SHC).","title":"Using TeenAstro without the hand controller"},{"location":"firmware/","text":"TeenAstro Firmware Build The code is maintained on github . Both Main Unit and Smart Hand Controller firmware are built with the Arduino environment, which provides a nice unified wrapper for the development tools (compilers, linkers etc.) for all supported processors, among which Teensy 3.2 / ARMv7 (Main Unit) and ESP8266 Wemos / Xtensa lx106 (SHC). Arduino IDE and CLI The original Arduino IDE (Integrated Development Environment) is derived from the Processing IDE, written (mostly) in Java. The IDE is now very large, and proves difficult to integrate into makefiles for building through the command line (the normal method used by the software industry). In 2018, the Arduino folks started the arduino-cli (Command Line Interface) project, aiming at providing all the IDE functionality from a command line. A new IDE (arduino-pro-ide, currently in alpha release) that runs on top of arduino-cli will eventually replace the original IDE. The cli is developed in the GO language, whereas the pro-ide is a theia / electron cross-platform application, written in javascript, HTML and CSS. Building with the IDE It is convenient to set a different location for each generated firmware: edit ~/.arduino15/preferences.txt, and add these lines (for example) build.path=path/mu (main unit) build.path=path/shc (hand controller) Exit the IDE and restart between build changes!! Main Unit Open TeenAstro1.0.ino in the Arduino IDE Select board Teensy 3.2 Compile the sketch ( Sketch Verify/Compile ) Upload with USB SHC Open SmartHandController.ino in the Arduino IDE Select board LOLIN (Wemos) D1 R2 & mini - instructions at https://github.com/esp8266/Arduino#installing-with-boards-manager Compile the sketch ( Sketch Verify/Compile ) Upload with Wifi interface Building with the command line (arduino-cli) Main Unit Thr Arduino CLI does not yet support the Teensy processor - details at https://forum.pjrc.com/threads/53548-Arduino-CLI-Alpha-Release-Teensy-Support/page2 SHC Run make , or issue the following command: arduino-cli compile -v -b esp8266:esp8266:d1_mini SmartHandController.ino The makefile automatically builds several versions of the SHC firmware, one for each supported language. Other environments It is also possible to use Visual Studio, Eclipse and possibly other environments to build TeenAstro.","title":"Firmware"},{"location":"firmware/#teenastro-firmware-build","text":"The code is maintained on github . Both Main Unit and Smart Hand Controller firmware are built with the Arduino environment, which provides a nice unified wrapper for the development tools (compilers, linkers etc.) for all supported processors, among which Teensy 3.2 / ARMv7 (Main Unit) and ESP8266 Wemos / Xtensa lx106 (SHC).","title":"TeenAstro Firmware Build"},{"location":"firmware/#arduino-ide-and-cli","text":"The original Arduino IDE (Integrated Development Environment) is derived from the Processing IDE, written (mostly) in Java. The IDE is now very large, and proves difficult to integrate into makefiles for building through the command line (the normal method used by the software industry). In 2018, the Arduino folks started the arduino-cli (Command Line Interface) project, aiming at providing all the IDE functionality from a command line. A new IDE (arduino-pro-ide, currently in alpha release) that runs on top of arduino-cli will eventually replace the original IDE. The cli is developed in the GO language, whereas the pro-ide is a theia / electron cross-platform application, written in javascript, HTML and CSS.","title":"Arduino IDE and CLI"},{"location":"firmware/#building-with-the-ide","text":"It is convenient to set a different location for each generated firmware: edit ~/.arduino15/preferences.txt, and add these lines (for example) build.path=path/mu (main unit) build.path=path/shc (hand controller) Exit the IDE and restart between build changes!!","title":"Building with the IDE"},{"location":"firmware/#main-unit","text":"Open TeenAstro1.0.ino in the Arduino IDE Select board Teensy 3.2 Compile the sketch ( Sketch Verify/Compile ) Upload with USB","title":"Main Unit"},{"location":"firmware/#shc","text":"Open SmartHandController.ino in the Arduino IDE Select board LOLIN (Wemos) D1 R2 & mini - instructions at https://github.com/esp8266/Arduino#installing-with-boards-manager Compile the sketch ( Sketch Verify/Compile ) Upload with Wifi interface","title":"SHC"},{"location":"firmware/#building-with-the-command-line-arduino-cli","text":"","title":"Building with the command line (arduino-cli)"},{"location":"firmware/#main-unit_1","text":"Thr Arduino CLI does not yet support the Teensy processor - details at https://forum.pjrc.com/threads/53548-Arduino-CLI-Alpha-Release-Teensy-Support/page2","title":"Main Unit"},{"location":"firmware/#shc_1","text":"Run make , or issue the following command: arduino-cli compile -v -b esp8266:esp8266:d1_mini SmartHandController.ino The makefile automatically builds several versions of the SHC firmware, one for each supported language.","title":"SHC"},{"location":"firmware/#other-environments","text":"It is also possible to use Visual Studio, Eclipse and possibly other environments to build TeenAstro.","title":"Other environments"},{"location":"indi/","text":"Introduction to INDI The INDI Library is a collection of programs designed to control astronomical equipment. Its telescope control platform, called Ekos, controls a TeenAstro mount through an INDI driver. Driver design TeenAstro, like many other mounts, is controlled with a protocol derived from an early Meade telescope, called LX200 . The TeenAstro INDI driver derives directly from the simplest LX200 driver with basic functionality (lx200basic), and adds the TeenAstro specific functions. When available, the existing LX200 functionality is used, if not it is copied from OnStep and other drivers, or implemented from scratch. Repository: https://github.com/indilib/indi Source files : lx200_TeenAstro.cpp, lx200_TeenAstro.h Driver info: indi_lx200_TeenAstro Driver versions Date Version Description Jan 2020 0.8 Basic functionality Apr 2020 1.0 Added error handling for limits, save and restore driver configuration Connection options KStars / Ekos runs either on a PC, Mac or on a Raspberry Pi. The connection between this device and TeenAstro is done either through USB (the Telescope port on the main unit), or through Wifi to the Smart HandController (SHC), port 9999 (IP address depends on the network). When running through Wifi, the SHC requires a firmware version that allows permanent IP connections with the \u201cOne to One\u201d Wifi menu option (SHC version 1.2b or above). Mount Type TeenAstro supports German Equatorial, Alt Azimuth, Fork Azimuth and Fork equatorial mounts. However the current driver only supports German Equatorial. Current features GOTO: yes Sync: yes Slew Speeds: Guide, 0.5x, 1x, 2x, 4x, 16x, 32x 64x, 0.5Max, Max (Max speed depends on mount and motors, and is configured through the hand controller) Track Rates: Sidereal, Solar, Lunar Tracking can be disabled Auto Meridian Flip: no Configurable custom parking positions: yes Pulse-guiding: yes Guide Rates: 0.25x, 0.5x, 1x ST4 Guiding: yes Sync and Alignment (2 or 3-star) is done using the hand controller. The mount needs to be aligned before connecting the driver. Guiding can be done with ST4 or software (pulse-guiding) 4 sites are stored, with their coordinates including altitude (elevation) An optional GPS device can be connected, its functionality is not exposed to the INDI driver. Functionality already implemented Tab Function command Standard Meade In TeenAstro Main control Set tracking mode :TQ# :TS# :TL# yes yes Main control Park / Unpark / Set parking position :HQ# :HR# :HP# part yes Main control Enable / Disable tracking :Te# :Td# no yes Main control Goto / abort :Sr# :Sd# :Sq# yes yes Main control Sync to current coords/object :CS# :CM# yes yes Main Control pier side / dist to meridian :Gm# yes yes Main control refraction :Tr# :Tn# no yes Motion control Set centering speed (buttons) :R# yes yes Motion control Move N / S / W / E :Mx# yes yes Motion control Backlash :\\$BD# :\\$BR# no yes Firmware Display firmware data :GVD# :GVN# etc yes yes Site Get current site location, UTC etc :GM# etc. yes yes Site Select Site :Wn# yes yes Site Get/Set site altitude :Ge# :Se# no yes Guide Set guiding speed :SX90:ddd# no yes Guide Send guiding command :Mgn# etc. yes yes To be done (or not) Tab Function command Standard Meade In TeenAstro Main control Object info - macro from lx200driver.h :LI# yes no Main control Alignment status :Gw# yes no Main control Elevation limits :Sh# :So# yes yes Motion control Meridian flip / minutes past meridian :GX94# no no Motion control Custom track rate (RA / declination) :RA# :RE# yes no Motion control dual axis tracking :T2# no no Motion control Tracking frequency / frequency adjust :T+# :T-# :GT# yes no Align Polar align :MP# no no PEC Periodic Error Correction :QZ# etc. yes no Focuser Focus control :F+ etc. yes yes","title":"INDI driver"},{"location":"indi/#introduction-to-indi","text":"The INDI Library is a collection of programs designed to control astronomical equipment. Its telescope control platform, called Ekos, controls a TeenAstro mount through an INDI driver.","title":"Introduction to INDI"},{"location":"indi/#driver-design","text":"TeenAstro, like many other mounts, is controlled with a protocol derived from an early Meade telescope, called LX200 . The TeenAstro INDI driver derives directly from the simplest LX200 driver with basic functionality (lx200basic), and adds the TeenAstro specific functions. When available, the existing LX200 functionality is used, if not it is copied from OnStep and other drivers, or implemented from scratch. Repository: https://github.com/indilib/indi Source files : lx200_TeenAstro.cpp, lx200_TeenAstro.h Driver info: indi_lx200_TeenAstro","title":"Driver design"},{"location":"indi/#driver-versions","text":"Date Version Description Jan 2020 0.8 Basic functionality Apr 2020 1.0 Added error handling for limits, save and restore driver configuration","title":"Driver versions"},{"location":"indi/#connection-options","text":"KStars / Ekos runs either on a PC, Mac or on a Raspberry Pi. The connection between this device and TeenAstro is done either through USB (the Telescope port on the main unit), or through Wifi to the Smart HandController (SHC), port 9999 (IP address depends on the network). When running through Wifi, the SHC requires a firmware version that allows permanent IP connections with the \u201cOne to One\u201d Wifi menu option (SHC version 1.2b or above).","title":"Connection options"},{"location":"indi/#mount-type","text":"TeenAstro supports German Equatorial, Alt Azimuth, Fork Azimuth and Fork equatorial mounts. However the current driver only supports German Equatorial.","title":"Mount Type"},{"location":"indi/#current-features","text":"GOTO: yes Sync: yes Slew Speeds: Guide, 0.5x, 1x, 2x, 4x, 16x, 32x 64x, 0.5Max, Max (Max speed depends on mount and motors, and is configured through the hand controller) Track Rates: Sidereal, Solar, Lunar Tracking can be disabled Auto Meridian Flip: no Configurable custom parking positions: yes Pulse-guiding: yes Guide Rates: 0.25x, 0.5x, 1x ST4 Guiding: yes Sync and Alignment (2 or 3-star) is done using the hand controller. The mount needs to be aligned before connecting the driver. Guiding can be done with ST4 or software (pulse-guiding) 4 sites are stored, with their coordinates including altitude (elevation) An optional GPS device can be connected, its functionality is not exposed to the INDI driver.","title":"Current features"},{"location":"indi/#functionality-already-implemented","text":"Tab Function command Standard Meade In TeenAstro Main control Set tracking mode :TQ# :TS# :TL# yes yes Main control Park / Unpark / Set parking position :HQ# :HR# :HP# part yes Main control Enable / Disable tracking :Te# :Td# no yes Main control Goto / abort :Sr# :Sd# :Sq# yes yes Main control Sync to current coords/object :CS# :CM# yes yes Main Control pier side / dist to meridian :Gm# yes yes Main control refraction :Tr# :Tn# no yes Motion control Set centering speed (buttons) :R# yes yes Motion control Move N / S / W / E :Mx# yes yes Motion control Backlash :\\$BD# :\\$BR# no yes Firmware Display firmware data :GVD# :GVN# etc yes yes Site Get current site location, UTC etc :GM# etc. yes yes Site Select Site :Wn# yes yes Site Get/Set site altitude :Ge# :Se# no yes Guide Set guiding speed :SX90:ddd# no yes Guide Send guiding command :Mgn# etc. yes yes","title":"Functionality already implemented"},{"location":"indi/#to-be-done-or-not","text":"Tab Function command Standard Meade In TeenAstro Main control Object info - macro from lx200driver.h :LI# yes no Main control Alignment status :Gw# yes no Main control Elevation limits :Sh# :So# yes yes Motion control Meridian flip / minutes past meridian :GX94# no no Motion control Custom track rate (RA / declination) :RA# :RE# yes no Motion control dual axis tracking :T2# no no Motion control Tracking frequency / frequency adjust :T+# :T-# :GT# yes no Align Polar align :MP# no no PEC Periodic Error Correction :QZ# etc. yes no Focuser Focus control :F+ etc. yes yes","title":"To be done (or not)"},{"location":"troubleshooting/","text":"Troubleshooting This section describes common problems and how to fix them. Mount goes in the wrong direction Check that RA and DEC are connected correctly, change the direction of either axis in the SHC \"Mount\" menu. In general, set the mount to its Home position (using the clutches) before switching it on. Make sure the pier side reported by TeenAstro corresponds to the actual mount position. If not, it can be changed through the SHC menu, and synchronize to an object afterwards. High-pitched noise from motors Either the mount movement is blocked, or your slewing speed is too high for the motor / voltage combination Mount goes into altitude error when it should not Check your site latitude and longitude. Mount stops tracking Check altitude / meridian limits (icons on SHC) Connecting to the Main Unit through telnet or serial port To diagnose communication problems, especially with astronomy software running on a PC, it is convenient to connect to the main unit via telnet: telnet <IP address> 9999 or via the serial port / USB: cu -p /ttyACM0 You can retrieve the IP address of TeenAstro on the SHC menu. Once connected, you can issue any LX200 command and view the result. For example, the standard command :GR# returns the current Right Ascension. telnet 192.168.0.12 9999 Trying 192.168.0.12... Connected to 192.168.0.12. Escape character is '^]'. :GR# 16:14:05# When connecting via telnet, the Wifi must be set to \"One to One\" (SHC Wifi menu). Check the list of commands supported by TeenAstro at this address","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"This section describes common problems and how to fix them.","title":"Troubleshooting"},{"location":"troubleshooting/#mount-goes-in-the-wrong-direction","text":"Check that RA and DEC are connected correctly, change the direction of either axis in the SHC \"Mount\" menu. In general, set the mount to its Home position (using the clutches) before switching it on. Make sure the pier side reported by TeenAstro corresponds to the actual mount position. If not, it can be changed through the SHC menu, and synchronize to an object afterwards.","title":"Mount goes in the wrong direction"},{"location":"troubleshooting/#high-pitched-noise-from-motors","text":"Either the mount movement is blocked, or your slewing speed is too high for the motor / voltage combination","title":"High-pitched noise from motors"},{"location":"troubleshooting/#mount-goes-into-altitude-error-when-it-should-not","text":"Check your site latitude and longitude.","title":"Mount goes into altitude error when it should not"},{"location":"troubleshooting/#mount-stops-tracking","text":"Check altitude / meridian limits (icons on SHC)","title":"Mount stops tracking"},{"location":"troubleshooting/#connecting-to-the-main-unit-through-telnet-or-serial-port","text":"To diagnose communication problems, especially with astronomy software running on a PC, it is convenient to connect to the main unit via telnet: telnet <IP address> 9999 or via the serial port / USB: cu -p /ttyACM0 You can retrieve the IP address of TeenAstro on the SHC menu. Once connected, you can issue any LX200 command and view the result. For example, the standard command :GR# returns the current Right Ascension. telnet 192.168.0.12 9999 Trying 192.168.0.12... Connected to 192.168.0.12. Escape character is '^]'. :GR# 16:14:05# When connecting via telnet, the Wifi must be set to \"One to One\" (SHC Wifi menu). Check the list of commands supported by TeenAstro at this address","title":"Connecting to the Main Unit through telnet or serial port"}]}